#ifndef KING_CPP
#define KING_CPP
#include "King.h"
#include "ChessBoard.cpp"

int King::validMove(int to_x, int to_y){
  if(to_x >= 1 && to_x <= 8 && to_y >= 1 && to_y <= 8){
    if(this->board->get_state_idx(to_x,to_y) == 0){
      return 1;
    }
    else if(this->isWhite != this->board->get_state_idx(to_x,to_y)->isWhite){
      return 2;
    }
    else{
      return 0;
    }
  }
  else{
    return 0;
  }
}
char32_t King::utfRepresentation(){
  if(this->isWhite == true){
    return L'♔';
  }
  else{
    return L'♚';
  }
}
char King::latin1Representation(){
  if(this->isWhite == true){
    return 'K';
  }
  else{
    return 'k';
  }
}

bool King::capturingMove(int to_x, int to_y){
  if(validMove(to_x,to_y) == 2){
    return true;
  }
  else{
    return false;
  }
}
bool King::nonCapturingMove(int to_x, int to_y){
  if(validMove(to_x,to_y) == 1){
    return true;
  }
  else{
    return false;
  }
}

vector<ChessMove> King::capturingMoves(){
  vector<ChessMove> list;
  for(int i = -1; i <= 1; i++){
    for(int j = -1; j <= 1; j++){
      if(capturingMove(this->x + i,this->y+j) == true){
	struct ChessMove M = {this->x, this->y, this->x + i, this->y + j, this};
	list.push_back(M);
      }
    }
  }
  return list;
}
vector<ChessMove> King::nonCapturingMoves(){
  vector<ChessMove> list;
  for(int i = -1; i <= 1; i++){
    for(int j = -1; j <= 1; j++){
      if(nonCapturingMove(this->x + i,this->y+j) == true){
	struct ChessMove M = {this->x, this->y, this->x + i, this->y + j, this};
	list.push_back(M);
      }
    }
  }
  return list;
}

#endif
